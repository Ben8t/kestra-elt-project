id: extract
namespace: kestra.weather

inputs:

  - id: time
    type: DATE
    after: 2024-01-01
    required: true
    
  - id: city
    type: SELECT
    values:
      - Berlin
      - Paris
      - "New York"
    required: true

tasks:

  - id: geocoding
    type: io.kestra.plugin.core.http.Request
    uri: https://geocoding-api.open-meteo.com/v1/search?name={{inputs.city | urlencode}}&count=1&language=en&format=json

  - id: geo_output
    type: io.kestra.plugin.core.output.OutputValues
    values:
      latitude: '{{ json(outputs.geocoding.body).results[0].latitude ?? 52 }}'
      longitude: '{{ json(outputs.geocoding.body).results[0].longitude ?? 13 }}'

  - id: download_weather_data
    type: io.kestra.plugin.core.http.Download
    uri: https://archive-api.open-meteo.com/v1/archive?latitude={{ outputs.geo_output.values.latitude }}&longitude={{ outputs.geo_output.values.longitude }}&start_date={{inputs.time}}&end_date={{inputs.time}}&hourly=temperature_2m


  - id: normalize_data
    type: io.kestra.plugin.jdbc.duckdb.Query
    store: true
    inputFiles:
      data.json: "{{ outputs.download_weather_data.uri }}"
    sql: |
      INSTALL json;
      LOAD json;
      COPY(
        SELECT
          unnest(hourly.time) AS time,
          unnest(hourly.temperature_2m) AS temperature_2m,
          '{{inputs.city}}' AS city,
          latitude AS latitude,
          longitude AS longitude
        FROM '{{workingDir}}/data.json'
      ) TO 
      '{{outputFiles["result.csv"]}}' (HEADER, DELIMITER ',');
    outputFiles:
      - result.csv
      

